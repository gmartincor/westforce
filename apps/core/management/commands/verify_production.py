"""
Comando para verificar que la configuraci√≥n de producci√≥n est√© correcta
"""

from django.core.management.base import BaseCommand
from django.conf import settings
from django.db import connection
from django.core.cache import cache
import os
import sys


class Command(BaseCommand):
    help = 'Verifica la configuraci√≥n de producci√≥n'

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.WARNING(
                'üîç Verificando configuraci√≥n de producci√≥n para westforce.com.au\n'
                '=' * 60
            )
        )

        errors = []
        warnings = []

        # Verificar configuraci√≥n b√°sica
        self.check_basic_settings(errors, warnings)
        
        # Verificar base de datos
        self.check_database(errors, warnings)
        
        # Verificar cache
        self.check_cache(errors, warnings)
        
        # Verificar configuraci√≥n de aplicaci√≥n
        self.check_app_config(errors, warnings)
        
        # Verificar archivos est√°ticos
        self.check_static_files(errors, warnings)

        # Mostrar resumen
        self.show_summary(errors, warnings)

    def check_basic_settings(self, errors, warnings):
        self.stdout.write('\nüìã Configuraci√≥n b√°sica:')
        
        # DEBUG
        if settings.DEBUG:
            errors.append('DEBUG est√° activado en producci√≥n')
        else:
            self.stdout.write(self.style.SUCCESS('‚úÖ DEBUG: False'))

        # SECRET_KEY
        if not settings.SECRET_KEY or settings.SECRET_KEY == 'django-insecure-change-this-in-production':
            errors.append('SECRET_KEY no est√° configurada correctamente')
        else:
            self.stdout.write(self.style.SUCCESS('‚úÖ SECRET_KEY: Configurada'))

        # ALLOWED_HOSTS
        if not settings.ALLOWED_HOSTS or settings.ALLOWED_HOSTS == ['*']:
            errors.append('ALLOWED_HOSTS no est√° configurado para producci√≥n')
        else:
            self.stdout.write(self.style.SUCCESS(f'‚úÖ ALLOWED_HOSTS: {settings.ALLOWED_HOSTS}'))

    def check_database(self, errors, warnings):
        self.stdout.write('\nüóÑÔ∏è  Base de datos:')
        
        try:
            with connection.cursor() as cursor:
                cursor.execute("SELECT 1")
                self.stdout.write(self.style.SUCCESS('‚úÖ Conexi√≥n a base de datos: OK'))
                
                db_config = settings.DATABASES['default']
                if db_config['ENGINE'] != 'django.db.backends.postgresql':
                    warnings.append('Motor de base de datos no es PostgreSQL')
                else:
                    self.stdout.write(self.style.SUCCESS('‚úÖ Motor de DB: PostgreSQL'))
                
                if 'sslmode' not in db_config.get('OPTIONS', {}):
                    warnings.append('SSL no est√° configurado para la base de datos')
                else:
                    self.stdout.write(self.style.SUCCESS('‚úÖ SSL de DB: Configurado'))
                    
        except Exception as e:
            errors.append(f'Error de conexi√≥n a base de datos: {str(e)}')

    def check_cache(self, errors, warnings):
        self.stdout.write('\nüîÑ Cache:')
        
        try:
            cache.set('test_key', 'test_value', 30)
            value = cache.get('test_key')
            if value == 'test_value':
                self.stdout.write(self.style.SUCCESS('‚úÖ Cache Redis: Funcionando'))
            else:
                errors.append('Cache Redis no est√° funcionando correctamente')
        except Exception as e:
            errors.append(f'Error de cache: {str(e)}')

    def check_app_config(self, errors, warnings):
        self.stdout.write('\nüè¢ Configuraci√≥n de aplicaci√≥n:')
        
        if hasattr(settings, 'DOMAIN'):
            self.stdout.write(self.style.SUCCESS(f'‚úÖ DOMAIN: {settings.DOMAIN}'))
        else:
            warnings.append('DOMAIN no est√° configurado')
        
        if '*.westforce.com.au' in settings.ALLOWED_HOSTS:
            self.stdout.write(self.style.SUCCESS('‚úÖ ALLOWED_HOSTS incluye *.westforce.com.au'))
        else:
            warnings.append('ALLOWED_HOSTS no incluye *.westforce.com.au')

    def check_static_files(self, errors, warnings):
        self.stdout.write('\nüì¶ Archivos est√°ticos:')
        
        if not settings.STATIC_ROOT:
            errors.append('STATIC_ROOT no est√° configurado')
        else:
            self.stdout.write(self.style.SUCCESS(f'‚úÖ STATIC_ROOT: {settings.STATIC_ROOT}'))

        if not os.path.exists(settings.STATIC_ROOT):
            warnings.append('Directorio STATIC_ROOT no existe (ejecutar collectstatic)')
        else:
            self.stdout.write(self.style.SUCCESS('‚úÖ Directorio de archivos est√°ticos: Existe'))

    def show_summary(self, errors, warnings):
        self.stdout.write('\n' + '=' * 60)
        
        if errors:
            self.stdout.write(self.style.ERROR(f'‚ùå {len(errors)} ERROR(ES) ENCONTRADO(S):'))
            for error in errors:
                self.stdout.write(self.style.ERROR(f'   ‚Ä¢ {error}'))
        
        if warnings:
            self.stdout.write(self.style.WARNING(f'‚ö†Ô∏è  {len(warnings)} ADVERTENCIA(S):'))
            for warning in warnings:
                self.stdout.write(self.style.WARNING(f'   ‚Ä¢ {warning}'))
        
        if not errors and not warnings:
            self.stdout.write(
                self.style.SUCCESS(
                    'üéâ ¬°Configuraci√≥n de producci√≥n verificada exitosamente!\n'
                    '   La aplicaci√≥n est√° lista para westforce.com.au'
                )
            )
        elif not errors:
            self.stdout.write(
                self.style.SUCCESS(
                    '‚úÖ Configuraci√≥n b√°sica correcta con algunas advertencias\n'
                    '   La aplicaci√≥n puede desplegarse en producci√≥n'
                )
            )
        else:
            self.stdout.write(
                self.style.ERROR(
                    '‚ùå La configuraci√≥n tiene errores cr√≠ticos\n'
                    '   Corregir antes de desplegar en producci√≥n'
                )
            )
            sys.exit(1)
