#!/bin/bash

# =============================================================================
# security-check.sh - Verificaci√≥n de seguridad para Docker y despliegue
# =============================================================================

set -e

echo "üîí Verificaci√≥n de seguridad para Westforce"
echo "=========================================="

# Funci√≥n para verificar vulnerabilidades Docker
check_docker_vulnerabilities() {
    echo "üê≥ Verificando vulnerabilidades en im√°genes Docker..."
    
    if command -v docker &> /dev/null; then
        echo "‚ÑπÔ∏è  Docker encontrado, verificando im√°genes..."
        
        # Verificar si hay im√°genes build
        if docker images | grep -q "westforce"; then
            echo "‚úÖ Im√°genes Westforce encontradas"
            docker images | grep "westforce"
        else
            echo "‚ÑπÔ∏è  No hay im√°genes Westforce construidas localmente"
        fi
        
        # Sugerir herramientas de seguridad
        echo "üí° Recomendaciones de seguridad:"
        echo "   - Usar herramientas como 'docker scan' o 'trivy'"
        echo "   - Actualizar im√°genes base regularmente"
        echo "   - Usar im√°genes oficiales cuando sea posible"
        
    else
        echo "‚ö†Ô∏è  Docker no est√° instalado o disponible"
    fi
}

# Funci√≥n para verificar configuraci√≥n de seguridad
check_security_config() {
    echo "üîß Verificando configuraci√≥n de seguridad..."
    
    # Verificar archivos sensibles
    if [ -f ".env" ]; then
        echo "‚ö†Ô∏è  Archivo .env encontrado - asegurar que no est√© en git"
        if grep -q "SECRET_KEY.*django-insecure" .env; then
            echo "üî¥ SECRET_KEY de desarrollo encontrada - cambiar en producci√≥n"
        fi
    fi
    
    # Verificar .gitignore
    if [ -f ".gitignore" ]; then
        if grep -q "\.env" .gitignore; then
            echo "‚úÖ .env est√° en .gitignore"
        else
            echo "‚ö†Ô∏è  .env no est√° en .gitignore"
        fi
    fi
    
    # Verificar Dockerfile
    if [ -f "Dockerfile" ]; then
        if grep -q "USER.*root" Dockerfile; then
            echo "‚ö†Ô∏è  Usuario root detectado en Dockerfile"
        else
            echo "‚úÖ Usuario no-root configurado en Dockerfile"
        fi
    fi
}

# Funci√≥n para verificar dependencias Python
check_python_security() {
    echo "üêç Verificando dependencias Python..."
    
    if command -v pip &> /dev/null; then
        echo "‚ÑπÔ∏è  Verificando vulnerabilidades con pip-audit (si est√° instalado)..."
        
        if command -v pip-audit &> /dev/null; then
            pip-audit --require-hashes --desc
        else
            echo "üí° Instalar pip-audit para verificar vulnerabilidades:"
            echo "   pip install pip-audit"
        fi
        
        echo "üí° Mantener dependencias actualizadas:"
        echo "   pip list --outdated"
        
    else
        echo "‚ö†Ô∏è  pip no est√° disponible"
    fi
}

# Funci√≥n para verificar configuraci√≥n de producci√≥n
check_production_security() {
    echo "üè≠ Verificando configuraci√≥n de producci√≥n..."
    
    # Verificar settings de producci√≥n
    if [ -f "config/settings/production.py" ]; then
        echo "‚úÖ Archivo de configuraci√≥n de producci√≥n encontrado"
        
        # Verificar configuraciones de seguridad
        if grep -q "DEBUG.*=.*False" config/settings/production.py; then
            echo "‚úÖ DEBUG=False en producci√≥n"
        else
            echo "‚ö†Ô∏è  DEBUG no est√° configurado como False"
        fi
        
        if grep -q "SECURE_SSL_REDIRECT.*=.*True" config/settings/production.py; then
            echo "‚úÖ SSL redirect habilitado"
        else
            echo "‚ö†Ô∏è  SSL redirect no configurado"
        fi
        
        if grep -q "SECURE_HSTS_SECONDS" config/settings/production.py; then
            echo "‚úÖ HSTS configurado"
        else
            echo "‚ö†Ô∏è  HSTS no configurado"
        fi
        
    else
        echo "‚ö†Ô∏è  Archivo de configuraci√≥n de producci√≥n no encontrado"
    fi
}

# Ejecutar verificaciones
echo "üîç Iniciando verificaciones de seguridad..."
echo ""

check_docker_vulnerabilities
echo ""

check_security_config
echo ""

check_python_security
echo ""

check_production_security
echo ""

echo "‚úÖ Verificaci√≥n de seguridad completada"
echo "========================================"
echo ""
echo "üìã Resumen de recomendaciones:"
echo "   1. Mantener im√°genes Docker actualizadas"
echo "   2. Usar SECRET_KEY segura en producci√≥n"
echo "   3. Verificar que archivos sensibles est√©n en .gitignore"
echo "   4. Ejecutar auditor√≠as de seguridad regularmente"
echo "   5. Usar HTTPS en producci√≥n"
echo "   6. Mantener dependencias actualizadas"
echo ""
echo "üîó Herramientas recomendadas:"
echo "   - docker scan (vulnerabilidades Docker)"
echo "   - pip-audit (vulnerabilidades Python)"
echo "   - bandit (an√°lisis de c√≥digo Python)"
echo "   - safety (verificaci√≥n de dependencias)"
